@top Program { OutputExpression+ }

@skip { space | lineComment | blockComment }

@precedence {
    seqBuilder @cut, unary @left, math @left, comparison @left, equality @left
}

OutputExpression { "output" orderLast ("as" Str)? }

@skip {"\n"} {
    Str { '"' strContent* '"' }
}

order1 {
    ParenExpression { "(" orderLast ")" }
    |
    Sequence { 
        ( "{" orderLast ("," orderLast)* "}" )
        |
        ( "{" "}" )
    }
    |
    Num
}

order2 {
    Not |
    Negative |
    order1
}

@skip {} {
    Not { !unary "!" Negative? order1 }
    
    Negative { !unary "-" Not? order1 }
}

eventSource<order> {
    Dice { order? "d" order2 }
    |
    Cards { order? "c" order2 }
}

order3 {
    eventSource<order3>
    |
    order2
}

order4 {
    Mult { order3 !math "*" order4 }
    |
    Div { order3 !math "/" order4 }
    |
    Mod { order3 !math "%" order4 }
    |
    order3
}

order5 {
    Add { order4 !math "+" order5 }
    |
    Sub { order4 !math "-" order5 }
    |
    order4
}

order6 {
    IsGreater { order5 !comparison ">" order5 }
    |
    IsLess { order5 !comparison "<" order5 }
    |
    IsGreaterEq { order5 !comparison ">=" order5 }
    |
    IsLessEq { order5 !comparison "<=" order5 }
    |
    order5
}

order7 {
    Eq { order6 !equality "==" order6 }
    |
    Neq { order6 !equality "!=" order6 }
    |
    order6
}

orderLast { order7 }

@tokens {
    space { @whitespace+ }

    lineComment {"//" ![\n]*}

    blockComment {"/*" ![@eof] "*/"}

    @precedence { lineComment, "/" }
    
    Num { @digit+ }

    strContent { !["\n] }
}