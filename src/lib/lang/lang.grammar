@top Program { OutputExpression+ }

@skip { lineComment | blockComment }

@precedence {
     spacedOp @left, comparison @left, equality @left
}

OutputExpression { "output" space orderLast (space "as" space Str)? }

@skip {"\n"} {
    Str { '"' strContent* '"' }
}

order1 {
    ParenExpression { "(" space? orderLast space? ")" }
    |
    Sequence { 
        ( "{" space? orderLast space? ("," space? orderLast space? )* "}" )
        |
        ( "{" space? "}" )
    }
    |
    Num
}

order2 {
    Dice { order2? "d" order1 }
    |
    Cards { order2? "c" order1 }
    |
    order1
}

order3 {
    Not
    |
    Negative
    |
    order2
}

Not { "!" (Negative | order2) }

Negative { "-" (Not | order2) }

spaceBefore<expr> { space? expr }

order4 {
    Mult { order3 spaceBefore<"*" space? order4> }
    |
    Div { order3 spaceBefore<"/" space? order4> }
    |
    Mod { order3 spaceBefore<"%" space? order4> }
    |
    order3 !spacedOp
}

order5 {
    Add { order4 spaceBefore<"+" space? order5> }
    |
    Sub { order4 spaceBefore<"-" space? order5> }
    |
    order4 !spacedOp
}

order6 {
    IsGreater { order5 !comparison space? ">" space? order5 }
    |
    IsLess { order5 !comparison space? "<" space? order5 }
    |
    IsGreaterEq { order5 !comparison space? ">=" space? order5 }
    |
    IsLessEq { order5 !comparison space? "<=" space? order5 }
    |
    order5 !spacedOp
}

order7 {
    Eq { order6 !equality space? "==" space? order6 }
    |
    Neq { order6 !equality space? "!=" space? order6 }
    |
    order6 !spacedOp
}

orderLast { order7 }

@tokens {
    space { @whitespace+ }

    lineComment {"//" ![\n]*}

    blockComment {"/*" ![@eof] "*/"}

    @precedence { lineComment, "/" }
    
    Num { @digit+ }

    strContent { !["\n] }
}